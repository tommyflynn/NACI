---
title: "Data Log"
author: "Tommy Flynn"
format: 
  html:
    theme: solar
    toc: true
    toc-location: left
    code-fold: false
    code-summary: "Show source code"
    code-tools: true
    code-block-bg: true
    code-block-border-left: "#31BAE9"
    number-sections: true
    comments:
      hypothesis: true
editor: visual
---

# Setup

```{r Knitr Options}
#| error: false
#| warning: false
#| message: false
# set options
library(knitr)
knitr::opts_chunk$set(root.dir = "~/Documents/1_Research/2_Data_Science/0_Projects/1_NACI/Data",
                      echo = TRUE,
                      error = TRUE,
                      tidy = TRUE,
                      tidy.opts = list(width.cutoff = 60),
                      message = FALSE,
                      warning = FALSE,
                      cache = TRUE)
# options(na.action = na.warn)??
```

```{r Packages}
# Chunk options:----
#| message: false
#| warning: false
# Packages for reading data from files: ----
library(readr)
library(haven) # for SAS and SPSS data files (e.g., ".sas7bdat")
library(readxl) # for Microsoft Excel spreadsheets
library(labelled)
# Packages for data wrangling & cleaning: ----
library(tidyverse) # set of packages for data import, cleaning, transformation, and analysis from the "Tidyverse"  
library(lubridate) # working with date-times
library(anytime) # data-times
library(hms) # times
library(forcats) # package for making and working with factors
library(stringr)


library(details)

# Packages for formatting output with rmarkdown/latex/quarto/knitr/etc. ----
library(kableExtra)
library(htmltools)
library(gt) # create and format latex tables
library(pander) # ????
library(printr) # Print R objects in 'knitr' documents nicely see the [(vignette)](https://cran.r-project.org/web/packages/printr/vignettes/printr.html#vignettedataset-lists)  

# Packages for Analyzing Data ----
# Time series analyses
library(tseries)
library(xts)
# Network analyses
library(igraph)
# Statistics & Models
library(modelr) # package for statistical modeling in r
```

## Data Files

Create an object that points to the directory (i.e., "\~/project_folder/Data") that contains data. Use that object to print a list of all the data files from the parent study.

```{r Data Directory}
data_path <- paste(getwd(), "Data", sep = "/")
```

```{r Data_File_Lists}
# 1. For each file type storing data (i.e., .sas7bdat, .xls/.xlsx, and .txt), create two lists containing; 1) complete pathnames for all .sas7bdat files, and  2) file names without complete path names for all data files
# 2. Print the names of all data files by mapping over the list of file names (not file path names)
all_data_fullpaths <- list.files(path = data_path,
                             pattern = ".sas7bdat|.xls|.csv|.txt",
                             full.names = TRUE)
all_data_filenames <- lst(list.files(path = data_path,
                                     pattern = ".sas7bdat|.xls|.csv|.txt",
                                     full.names = FALSE))


map(all_data_filenames, paste, sep = "/n")

```

```{r SAS_Data}
# Create list of all .sas7bdat (SAS)  file paths and  files names
sas_data_fullpaths <- list.files(path = data_path,
                             pattern = "*.sas7bdat",
                             full.names = TRUE)
sas_data_filenames <- lst(list.files(path = data_path,
                                     pattern = "*.sas7bdat",
                                     full.names = FALSE))

# Print the names of all .sas7bdat (SAS) files
map(sas_data_filenames, paste, sep = "/n")
```

After removing duplicate data files and files containing data from other studies, there were `r length(sas_data_filenames)` ".sas7bdat" (SAS data) files. The combined size of these files was `r sum(file.size(paste(data_path, sas_data_filenames, sep = "/")))/1000000000` gigabytes.

```{r Excel_files}
# Create list of all .xlsx and .xls (Excel)  file paths and  files names
xlsx_data_fullpaths <- list.files(path = data_path,
                             pattern = "*.xls",
                             full.names = TRUE)
xlsx_data_filenames <- lst(list.files(path = data_path,
                                     pattern = "*.xls",
                                     full.names = FALSE))

# Print list of all .xlsx (Excel) files
xlsx_data_filenames
```

```{r TXT_files}
# Create list of all .txt file paths and  files names
txt_data_fullpaths <- list.files(path = data_path,
                             pattern = "*.txt",
                             full.names = TRUE)
txt_data_filenames <- lst(list.files(path = data_path,
                                     pattern = "*.txt",
                                     full.names = FALSE))

# Print list of all .txt filenames
txt_data_filenames
```

# Importing & Cleaning

## Patient Data

### Patient ID to RFID badge SID key: `id_sid`

Read & print data from "id_sid_matchup.sas7bdat" & "id_sid_matchup.sas7bdat."

```{r ReadData id_sid_matchup}
#| eval: false  
# 1d. read "id_sid_matchup.sas7bdat" into id_sid and "id_sid_matchup2.sas7bdat" into id_sid2
# id_sid_matchup <- read_sas(paste(data_path, "id_sid_matchup.sas7bdat", sep = "/"))
# id_sid_matchup2 <- read_sas(paste(data_path, "id_sid_matchup2.sas7bdat", sep = "/"))

```

Import every SAS data file with "patient" or "person" in its name (`haven` library) and print a data dictionary for each file (`labelled` library).

```{r Patient_Data}
# Make a list of filenames with "patient" or "person" in the name
patient_files <- as.list(sas_data_fullpaths[(str_detect(sas_data_fullpaths, "patient|person"))])

# Use package purrr to import patient_data by iterating over every element of `patient_files` 
patient_data <- map(patient_files, read_sas)
names(patient_data)
# generate a data dictionary with package labelled
map(patient_data, generate_dictionary)
```

### Patient Acuity: `pt_acuity`

Read & print patient acuity data in "ACUITY-patients.xlsx," which is an Excel workbook with 3 sheets.

```{r ReadData pt_acuity}
#| eval: false   
# 1e. read "ACUITY-patients.xlsx
pt_acuity <- read_xlsx(paste(data_path, "ACUITY-patients.xlsx", sep = "/"))
# str(pt_acuity)
pt_acuity_s2 <- read_xlsx(paste(data_path, "ACUITY-patients.xlsx", sep = "/"), 
                          sheet = 2, 
                          range = "A2:H83")
# str(pt_acuity_s2)
pt_acuity_s3 <- read_xlsx(paste(data_path, "ACUITY-patients.xlsx", sep = "/"), 
                          sheet = 3, 
                          range = "A2:G83")
# str(pt_acuity_s3)  
```

The first sheet lists the number of patients in each ESI acuity level (columns) by shift (rows). The other two sheets appear to be variations of the first.

```{r PrintData pt_acuity}
#| eval: false  
# Patient acuity (Emergency Severity Index; ESI) counts by shift
kable(head(pt_acuity))
# Pivot_wider to view number of patients in each ESI category by shift
pt_acuity %>% 
  group_by(Acuity) %>% 
  count(Shift) %>% 
  pivot_wider(names_from = Acuity, values_from = n) %>% 
  head() %>% kable()
# Print the first 6 rows of the other two sheets in the xlsx file
kable(head(pt_acuity_s2))
kable(head(pt_acuity_s3))
```

### Patient Location Datasets: `pt_complete`

The SAS data file, "completepat.sas7bdat," contains RFID badge location (by *room number*) for all patients each second of every shift. The data were stored in a table that is extremely *wide* (i.e., `r length(sas_data_list["completepat.sas7bdat"])`columns), I used `pivot_longer()` to reshape it by collapsing all location-by-second columns (variables `flocX`, where `X` is the shift time in seconds that the respective SID was identified in room number `flocX`) into two columns, names to `seconds` and values to `location`. Note that this creates **many duplicated rows** (i.e., needs filtering).

```{r ReadData pt_complete}
#| eval: false  
# 1. pull "completepat.sas7bdat" from `sas_data_list` as `tibble()`
pt_complete <- tibble(sas_data_list["completepat.sas7bdat"])
# 2a. subset first 10 observations for data transformation code preparation
pt_cmplt <- pt_complete %>% 
# 2a. Pivot the data.frame from wide to long by placing all column names that start with "floc" into a new column, "seconds," and placing respective observations for each "floc" variable into a "location_num" column
  pivot_longer(cols = starts_with("floc"), names_to = "seconds", values_to = "location_num") %>% 
# 2b. Remove the prefix "floc" from `time_seconds` and keep the digits as `seconds`
  mutate(seconds = as.integer(str_replace(seconds, "floc", "")), 
         shift_num_ampm = str_trim(shift_num_ampm),
         shift_num = as.integer(str_extract(shift_num_ampm, "[:digit:]+")),
         am_pm = str_extract(shift_num_ampm, "am|pm"),
         date = make_date(year = year, month = mon, day = day)) %>% 
# 2c. Filter out all rows for which no location was recorded
  filter(!is.na(location))

# 3. View data frame dictionary  
generate_dictionary(pt_cmplt)

```

### Staff location: `staff_complete`

The SAS data file, "completestaff.sas7bdat," contains RFID badge location (by *room number*) for all staff each second of every shift.

```{r staff_complete}
#| eval: false  
# 1. pull "completestaff.sas7bdat" from `sas_data_list` as `tibble()` ----
staff_complete <- tibble(sas_data_list["completestaff.sas7bdat"])
# 2. Use staff_complete to make staff_cmplt for data cleaning & transformation ----
staff_cmplt <- staff_complete %>% 
  # 2a. Pivot the data.frame from wide to long by placing all column names that start with "floc" into a new column, "seconds," and placing respective observations for each "floc" variable into a "location_num" column
  pivot_longer(cols = starts_with("floc"), names_to = "seconds", values_to = "location_num") %>% 
  # 2b. Remove the prefix "floc" from `time_seconds` and keep the digits as `seconds`
  mutate(seconds = as.integer(str_replace(seconds, "floc", "")), 
         shift_num_ampm = str_trim(shift_num_ampm),
         shift_num = as.integer(str_extract(shift_num_ampm, "[:digit:]+")),
         am_pm = str_extract(shift_num_ampm, "am|pm"),
         date = make_date(year = year, month = mon, day = day)) # %>% 
  # 2c. Filter out all rows for which no location was recorded
  filter(!is.na(location))

# 3. View data frame structure ----
generate_dictionary(staff_cmplt)
```

# SessionInfo

```{r SessionInfo}
sessioninfo::session_info()%>%
  details::details(
    summary = 'Current session info',
    open    = FALSE
  )
```
