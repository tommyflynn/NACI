---
title: "Package Directory"
author: "Tommy Flynn"
bibliography: package_citations.bib
format: 
  html:
    toc: true
    code-summary: "show code"
    code-tools: true
    code-block-bg: true
    code-block-border-left: "#31BAE9"
    number-sections: true
editor: visual
---

```{r}
#| message: false
#| warning: false
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, error = TRUE)
# Importing ----
library(readr)
library(haven)
library(readxl)
library(httr)
library(googlesheets4)
library(googledrive)
library(rvest)
library(jsonlite)
library(xml2)
library(bigrquery)
library(DBI)
library(rgdal)
library(maptools)
# Wrangling ----
library(dplyr)
library(tibble)
library(labelled)
library(forcats)
library(stringr)
library(lubridate)
library(anytime)
library(hms)
# Analyzing ----
library(gtsummary)
library(xtable)
library(ztable)
library(sjmisc)
library(psych)
library(memisc)
library(quantreg)
## Networks
library(igraph)
library(networkDynamic)
## Models
library(modelr)
library(corrr)
## Time-Series
library(tseries)
library(xts)
## Spatio-temporal
library(spacetime)
library(leaflet)
library(rgdal)
library(maptools)
# Programming ----
library(purrr)
library(magrittr)
library(glue)
# Formatting ----
library(quarto)
library(printr)
library(knitr)
library(kableExtra)
library(htmltools)
library(gt)
library(pander)
library(bibtex)
library(RefManageR)
```

**This is a list of all loaded packages:**

```{r}
# Print a list of all loaded packages:
pkgs <- search()[str_which(search(), "package")]
pkgs <- str_replace(pkgs, "package:", "")
pkgs
```

`lsp` is a function that prints all package verbs for a given package:

```{r lsp}
#| echo: true
# Function to print a list of all functions for a given package. Copied from stack overflow user ["Maiasaura"] (https://stackoverflow.com/questions/12575098/to-see-all-the-content-not-just-objects-in-a-package-in-r)

lsp <- function (package, all.names = FALSE, pattern = ".") {
    package <- deparse(substitute(package))
    lst(Functions = ls(pos = paste("package", package, sep = ":"), all.names = all.names, 
        pattern = pattern))
}
```

# Importing

## `readr`

```{r}
lsp(readr)
```

## `haven`

```{r}
lsp(haven)
```

## `readxl`

```{r}
lsp(readxl)
```

## `httr` for web APIs

```{r}
lsp(httr)
```

## `googlesheets4` for Google Sheets via the Sheets API v4.

```{r}
lsp(googlesheets4)
```

## `googledrive` for Google Drive files.

```{r}
lsp(googledrive)
```

## `rvest` for web scraping.

```{r}
lsp(rvest)
```

## `jsonlite` for JSON

```{r}
lsp(jsonlite)
```

-   Maintained by Jeroen Ooms

## `xml2` for XML

```{r}
lsp(xml2)
```

## `bigrquery` for Google Cloud

```{r}
lsp(bigrquery)
```

## `DBI`

`DBI` is for relational databases (Maintained by Kirill MÃ¼ller). You'll need to pair `DBI` with a database specific backends like `RSQLite`, `RMariaDB`, `RPostgres`, or `odbc`. Learn more at <https://db.rstudio.com>.

```{r}
lsp(DBI)
```

# Wrangling

## `dplyr`

```{r}
lsp(dplyr)
```

-   Two packages that allow you to interface with different backends (e.g., databases) using the same `dplyr` syntax:

    -   `dbplyr` allows you to use remote database tables by converting dplyr code into SQL.

    -   `dtplyr` provides a `data.table` backend by automatically translating to the equivalent, but usually much faster, `data.table` code.

## `tibble`

```{r}
lsp(tibble)
```

## `labelled`

```{r}
lsp(labelled)
```

## `forcats`

```{r}
lsp(forcats)
```

## `stringr`

```{r}
lsp(stringr)
```

## `lubridate`

```{r}
lsp(lubridate)
```

## `anytime`

```{r}
lsp(anytime)
```

## `hms`

```{r}
lsp(hms)
```

# Analyzing

## Descriptive Statistics & Summary Tables

### `gtsummary`

```{r}
lsp(gtsummary)
```

### `xtable`

```{r}
lsp(xtable)
```

### `ztable`

```{r}
lsp(ztable)
```

### `sjmisc`

```{r}
lsp(sjmisc)
```

### `psych`

A general purpose toolbox for personality, psychometric theory and experimental psychology. Functions are primarily for multivariate analysis and scale construction using factor analysis, principal component analysis, cluster analysis and reliability analysis, although others provide basic descriptive statistics. Item Response Theory is done using factor analysis of tetrachoric and polychoric correlations. Functions for analyzing data at multiple levels include within and between group statistics, including correlations and factor analysis. Functions for simulating and testing particular item and test structures are included. Several functions serve as a useful front end for structural equation modeling. Graphical displays of path diagrams, factor analysis and structural equation models are created using basic graphics. Some of the functions are written to support a book on psychometric theory as well as publications in personality research. For more information, see the <https://personality-project.org/r/> web page.

```{r}
lsp(psych)
```

## Models & Statistical Methods

### `gtsummary`

***see above*** \### `memisc`

```{r}
lsp(memisc)
```

### `quantreg`

### `tidymodels`

-   `modelr`

-   `rsample`

    -   `rsample` provides infrastructure for efficient data splitting and resampling.

-   `parsnip`

    -   `parsnip` is a tidy, unified interface to models that can be used to try a range of models without getting bogged down in the syntactical minutiae of the underlying packages.

-   `tune`

    -   tune helps you optimize the hyperparameters of your model and pre-processing steps.

-   `workflows`

    -   workflows bundle your pre-processing, modeling, and post-processing together.

-   `yardstick`

    -   yardstick measures the effectiveness of models using performance metrics.

-   `broom`

    -   broom converts the information in common statistical R objects into user-friendly, predictable formats.

-   `dials`

    -   dials creates and manages tuning parameters and parameter grids.

-   `infer`

    -   `infer` is a high-level API for tidyverse-friendly statistical inference.

-   `corrr`

    -   The `corrr` package has tidy interfaces for working with correlation matrices.

### `modelr`

```{r}
lsp(modelr)
```

### `corrr`

```{r}
lsp(corrr)
```

## Network Analyses

### `igraph`

> "The main goals of the igraph library is to provide a set of data types and functions for 1) pain-free implementation of graph algorithms, 2) fast handling of large graphs, with millions of vertices and edges, 3) allowing rapid prototyping via high level languages like R" [(igraph.org, 2022)](https://igraph.org/r/html/latest/aaa-igraph-package.html).

```{r}
lsp(igraph)
```

### `networkDynamic`

> "The `networkDynamic` package provides support for a simple family of dynamic extensions to the network (Butts, 2008) class; these are currently accomplished via the standard network attribute functionality (and hence the resulting objects are still compatible with all conventional routines), but greatly facilitate the practical storage and utilization of dynamic network data. The dynamic extensions are motivated in part by the need to have a consistent data format for exchanging data, storing the inputs and outputs to relational event models, statistical estimation and simulation tools such as ergm (Hunter et al., 2008b) and tergm (Krivitsky P and Handcock M , 2013), and dynamic visualizations" [(Butts et al., 2021, p. 2-3)](https://cran.r-project.org/web/packages/networkDynamic/vignettes/networkDynamic.pdf). [@RN15098]

```{r}
lsp(networkDynamic)
```

## Time Series Analyses

### `tseries`

```{r}
lsp(tseries)
```

### `xts`

```{r}
lsp(xts)
```

# Programming

## `purrr`

```{r}
lsp(purrr)
```

## `magrittr`

`magrittr` provides the pipe, `%>%` used throughout the tidyverse. It also provide a number of more specialized piping operators (like `%$%` and `%<>%`) that can be useful in other places.

```{r}
lsp(magrittr)
```

## `glue`

`glue` provides an alternative to `paste()` that makes it easier to combine data and strings.

```{r}
lsp(glue)
```

# Formatting

## `quarto`

```{r}
lsp(quarto)
```

## `knitr`

```{r}
lsp(knitr)
```

## `kableExtra`

```{r}
lsp(kableExtra)
```

## `htmltools`

```{r}
lsp(htmltools)
```

## `gt`

```{r}
lsp(gt)
```

## `pander`

```{r}
lsp(pander)
```

## `printr`

```{r}
lsp(printr)

```

Print R objects in 'knitr' documents nicely see the [(vignette)](https://cran.r-project.org/web/packages/printr/vignettes/printr.html#vignettedataset-lists)

## Citations & Bibliographies

## `bibtex`

```{r}
lsp(bibtex)
```

## `RefManageR`

```{r}
lsp(RefManageR)
```
